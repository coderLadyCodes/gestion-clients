name: deploy gc back
on: [push]
env:
  IMAGE: gestion-clients
  VERSION: 0.0.1-SNAPSHOT
jobs:
  create-folder:
    name: create folder
    runs-on: ubuntu-latest

    steps:
      - name: execute commands
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.PRIVATE_KEY }}
          port: 22
          script: |
            mkdir /opt/applications/gc/${{ENV.IMAGE}}
            ls -al /opt/applications/gc

  generate-image:
    name: generate image
    runs-on: ubuntu-latest
    needs: ['create-folder']
    steps:
      - name: cloner le repertoire
        uses: actions/checkout@master
      - name: setup java version
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Make Maven Wrapper Executable
        run: chmod +x ./mvnw

      - name: generate and push image
        run: |
          ./mvnw clean package spring-boot:build-image \
          -Ddocker.publishRegistry.username=${{secrets.DCH_USERNAME}} \
          -Ddocker.publishRegistry.password=${{secrets.DCH_PASSWORD}} \
          -Dspring-boot.build-image.publish=true \
          -Dmaven.test.skip=true



  run-container:
    name: run container
    runs-on: ubuntu-latest
    needs: [ 'create-folder', 'generate-image' ]
    steps:
      - name: cloner le repertoire
        uses: actions/checkout@master
      - name: copy file via ssh key
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.PRIVATE_KEY }}
          port: 22
          source: "compose.yml"
          target: /opt/applications/gc/${{ENV.IMAGE}}
      - name: execute commands to run container
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.PRIVATE_KEY }}
          port: 22
          script: |
            echo DB_HOST="${{ secrets.DB_HOST}}" >> /opt/applications/gc/${{ENV.IMAGE}}/ .env
            echo DB_USERNAME="${{ secrets.DB_USERNAME}}" >> /opt/applications/gc/${{ENV.IMAGE}}/ .env
            echo DB_PASSWORD="${{ secrets.DB_PASSWORD}}" >> /opt/applications/gc/${{ENV.IMAGE}}/ .env
            docker compose -f /opt/applications/gc/${{ENV.IMAGE}}/ compose.yml up -d
